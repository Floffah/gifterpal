import * as prettier from "prettier";
import { transform } from "esbuild";
import { readFile, readdir } from "node:fs/promises";
import { resolve } from "node:path";
import { RequiredOptions } from "prettier";

import * as prettierConfig from "../.prettierrc.js";

const promptsDir = await readdir(resolve(__dirname, "../prompts"));

let declarationFile = `// This file is autogenerated by scripts/transpilePrompts.ts
// Do not edit this file directly.
/**
 * @module
 */

`;
let unOptimisedJavascriptCode = `// This file is autogenerated by scripts/transpilePrompts.ts
// Do not edit this file directly.
/**
 * @module
 */
`;

const systemPromptsDictionary: Record<string, string> = {};
const userPromptsDictionary: Record<string, string> = {};

for (const file of promptsDir) {
    if (file.endsWith(".md")) {
        const [name, type] = file.replace(".md", "").split(".");

        const content = await readFile(
            resolve(__dirname, "../prompts", file),
            "utf-8",
        );

        if (type === "system") {
            systemPromptsDictionary[name] = content;
        } else if (type === "user") {
            userPromptsDictionary[name] = content;
        } else {
            throw new Error(`Unknown prompt type: ${type} in file ${file}`);
        }
    }
}

unOptimisedJavascriptCode += `export const SystemPrompts = ${JSON.stringify(
    Object.keys(systemPromptsDictionary),
    null,
    4,
)};

export const systemPromptsDictionary = ${JSON.stringify(
    systemPromptsDictionary,
    null,
    4,
)};

export const UserPrompts = ${JSON.stringify(
    Object.keys(userPromptsDictionary),
    null,
    4,
)};

export const userPromptsDictionary = ${JSON.stringify(
    userPromptsDictionary,
    null,
    4,
)};  
`;

const javascriptCode = await transform(unOptimisedJavascriptCode, {
    minify: true,
    format: "cjs",
    target: "es2020",
    charset: "utf8",
    sourcemap: false,
    treeShaking: true,
});

await Bun.write(
    resolve(__dirname, "../convex/codegen/prompts.js"),
    javascriptCode.code,
);

declarationFile += `export type SystemPrompt = "${Object.keys(
    systemPromptsDictionary,
).join('" | "')}";
export declare const SystemPrompts: SystemPrompt[];
export declare const systemPromptsDictionary: { [key in SystemPrompt]: string };

export type UserPrompt = "${Object.keys(userPromptsDictionary).join('" | "')}";
export declare const UserPrompts: UserPrompt[];
export declare const userPromptsDictionary: { [key in UserPrompt]: string };
`;

declarationFile = await prettier.format(declarationFile, {
    ...prettierConfig,
    parser: "typescript",
} as Partial<RequiredOptions>);

await Bun.write(
    resolve(__dirname, "../convex/codegen/prompts.d.ts"),
    declarationFile,
);
